#!/usr/bin/python
# -*- coding: utf-8 -*-

# DON'T EDIT decatview.py, INSTEAD EDIT decatview.py.in

# https://www.legacysurvey.org/viewer?ra=30.1530962&dec=-5.0236864&zoom=16&layer=dr8

import sys
import math
import os
import re
import time
import random
import json
import psycopg2
import psycopg2.extras
import base64
from io import BytesIO
import uuid
import datetime
import dateutil.parser
import pytz
import gzip
import web
import numpy
from web import form
import PIL
import PIL.Image

if not "@pythonpathdir@" in sys.path:
    sys.path.insert(0, "@pythonpathdir@")

from @webapconfig@ import webapfullurl, webapdir, webapdirurl, DBdata, DBname
from util import dtohms, dtodms, radectolb, mjd, dateofmjd, parsedms, sanitizeHTML

# ======================================================================

class HandlerBase(object):
    def __init__(self):
        self.response = ""
        self.idordinal = 0
        
        with open( f'{DBdata}/dbuser' ) as ifp:
            user = ifp.readline().strip()
        with open( f'{DBdata}/dbpasswd' ) as ifp:
            password = ifp.readline().strip()
        with open( f'{DBdata}/dbhost' ) as ifp:
            host = ifp.readline().strip()
        with open( f'{DBdata}/dbport' ) as ifp:
            port = ifp.readline().strip()
        with open( f'{DBdata}/{DBname}' ) as ifp:
            database = ifp.readline().strip()
        sys.stderr.write( f'sys.path={sys.path}' )
        sys.stderr.write("viewxps.py connecting to database with dbname='{}' user='{}' host='{}' password='{}'\n"
                         .format( database, user, host, password ))
        sys.stderr.write( f'DBdata={DBdata}, DBname={DBname}\n' )
        sys.stderr.write( f'webapdir={webapdir}, webapdirurl={webapdirurl}, webapfullurl={webapfullurl}\n' )
        sys.stderr.write(f'web.ctx.home={web.ctx.home}\n')
        self.db = psycopg2.connect("dbname='{}' user='{}' host='{}' password='{}'"
                                   .format( database, user, host, password ))
        # sys.stderr.write("db.status is {}\n".format(self.db.status))

    def finalize(self):
        self.db.close()
        
    def htmltop(self):
        self.response = "<!DOCTYPE html>\n"
        self.response += "<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n"
        self.response += "<link rel=\"stylesheet\" href=\"{}decat.css\">\n".format( webapdirurl )
        self.response += "<script src=\"{}decatview.js\"></script>\n".format( webapdirurl )
        self.response += "<title>DECaT LBL Pipeline Candidate Viewer</title>\n"
        self.response += "</head>\n<body>\n"

    def htmlbottom(self):
        self.response += "\n</body>\n</html>\n"

    def hidden_state( self, omit=[] ):
        for val in self.state:
            if not val in omit:
                self.response += form.Input( name=val, id="{}{}".format( val, self.idordinal ),
                                             type="hidden", value=self.state[val] ).render() + "\n"
        self.idordinal += 1
                
    def back_to_home( self, omit=[] ):
        self.response += '<form method=\"POST\" action=\"{}\">\n'.format( webapfullurl )
        self.hidden_state( omit=omit )
        self.response += "<p><button class=\"link\" type=\"submit\">Back to Home</button></p>\n"
        self.response += "</form>\n"
                
    def set_state( self ):
        # Ugh.  All state for all different pages.  Ugly.
        # Rob, do this better.  Maybe.
        self.state = { "date0": "",
                       "date1": "",
                       "onlygallat": False,
                       "gallatincexc": "exc",
                       "minb": -20,
                       "maxb": 20,
                       "showvetting": False,
                       "offset": 0,
                       "numperpage": 100,
                       "exposure": "",
                       "orderby": "real/bogus",
                       "ccds": "",
                       "showrb": False,
                       "whattodo": "Show Objects",        # ROB THINK ABOUT THIS
                       "mindet": 5,
                       "rbcut": 0.6,
                       "minrb": 5,
                       "numdays": 3,
                       "minmag": 25,
                       "maxmag": 15,
                       "limitbyradec": False,
                       "raformat": "hms",
                       "ra": "",
                       "decformat": "dms",
                       "dec": "",
                       "searchunit": "arcsec",
                       "searchradius": "",
                       "ccds": "",
                       "orderby": "real/bogus",
                       "showrb": True,
                       "candidate": "",
                       "user": None,
                       "password": None,
                       "vetfieldtype": None,
                       "vetprerated": None
        }
        self.webinput = web.input()
        # for inpval in self.webinput:
        #     sys.stderr.write( "{} = {}\n".format( inpval, self.webinput[inpval] ) )
        for stateval in self.state:
            if stateval in self.webinput:
                self.state[stateval] = self.webinput[stateval]

    # ========================================

    def prevnext( self, state, numobjs, formtarget="showexp" ):
        nextarr = []
        prevarr = []
        nextord = self.idordinal
        prevord = nextord + 1
        self.idordinal += 2
        for key in state:
            if key=="offset":
                nextvalue = int(state["offset"]) + int(state["numperpage"])
                prevvalue = int(state["offset"]) - int(state["numperpage"])
                prevvalue = prevvalue if prevvalue > 0 else 0
            else:
                nextvalue = prevvalue = state[key]
            nextarr.append( form.Hidden( key, value=nextvalue, id="{}{}".format(key, nextord) ) )
            prevarr.append( form.Hidden( key, value=prevvalue, id="{}{}".format(key, prevord) ) )
        nextarr.append( form.Button( name="Next {}".format( state["numperpage"] ),
                                     id="Next_{}.{}".format( state["numperpage"], self.idordinal ),
                                     html="Next {}".format( state["numperpage"] ),
                                     type="submit",
                                     formaction="{}{}".format( webapfullurl, formtarget ) ) )
        prevarr.append( form.Button( name="Previous {}".format( state["numperpage"] ),
                                     id="Previous_{}.{}".format( state["numperpage"], self.idordinal ),
                                     html="Previous {}".format( state["numperpage"] ),
                                     type="submit",
                                     formaction="{}{}".format( webapfullurl, formtarget ) ) )
        
        nextform = form.Form( *nextarr )
        prevform = form.Form( *prevarr )

        self.back_to_home()

        # self.response += ( "<p>In prevnext, offset={}, numperpage={}, numobjs={}</p>\n"
        #                    .format( state["offset"], state["numperpage"], numobjs ) )
        
        if int(state["offset"]) > 0:
            self.response += "<form method=\"Post\">\n"
            self.response += prevform.render()
            self.response += "</form>\n"
        if int(state["offset"]) + int(state["numperpage"]) < numobjs:
            self.response += "<form method=\"Post\">\n"
            self.response += nextform.render()
            self.response += "</form>\n"

    # ========================================
        
    def objecttable( self, rows, showvetting=False, goodbad=None, user=None, passwd=None ):

        setallunsetbadbutton = ""
        if goodbad is not None:
            notgoodbadset = []
            for row in rows:
                if not row["oid"] in goodbad:
                    notgoodbadset.append( str(row["oid"]) )
            setallunsetbadbutton = "<p>"
            setallunsetbadbutton += form.Button( name="makethingsbad", html="Make All Unset Bad",
                                                 onclick="setallbad(\"{}\", \"{}\", [{}])"
                                                 .format( user, passwd, ",".join(notgoodbadset) ) ).render()
            setallunsetbadbutton += "</p>"

        self.response += setallunsetbadbutton
            
        self.response += "<form method=\"POST\" action=\"{}showcand\">\n".format( webapfullurl )
        self.hidden_state( omit=["candidate"] )
        
        self.response += "<table class=\"maintable\">\n"
        self.response += "<tr><th>Info</th><th>New</th><th>Ref</th><th>Sub</th></tr>\n"
        
        for row in rows:
            candid = row["cid"]
            objid = row["oid"]
            rb = row["rb"]
            ra = row["ra"]
            dec = row["dec"]
            ccdnum = row["ccdnum"]
            filename = row["filename"]
            scib64 = row["scijpg"].replace("\n","")
            refb64 = row["refjpg"].replace("\n","")
            diffb64 = row["diffjpg"].replace("\n","")
            
            self.response += "<tr>\n"
            self.response += "<td>Candidate: "
            self.response += form.Button( name="candidate", id="candidate_button_{}".format(candid),
                                          value=candid, class_="link", html=candid ).render()
            self.response += "<br>\n"
            if goodbad is None:
                self.response += "<b>rb: {:.4f}</b><br>\n".format( rb )
            self.response += u"α: {} &nbsp;&nbsp; δ: {}<br>\n".format( dtohms( ra ), dtodms( dec ) )
            self.response += "File: {}<br>ccd: {}<br>\n".format(filename.replace(".fz",""), ccdnum)
            self.response += "Obj ID: {}\n".format( objid )

            if scib64 is None:
                self.response += "<td>(Sci cutout missing)</td>\n"
            else:
                self.response += ( "<td><img src=\"data:image/jpeg;base64,{}\" "
                                   "width=204 height=204 alt=\"New\"></td>\n".format( scib64 ) )

            if refb64 is None:

                self.response += "<td>(Ref cutout missing)</td>\n"
            else:
                self.response += ( "<td><img src=\"data:image/jpeg;base64,{}\" "
                                   "width=200 height=200 alt=\"Ref\"></td>\n".format( refb64 ) )

            if diffb64 is None:
                self.response += "<td>(Diff cutout missing)</td>\n"
            else:
                self.response += ( "<td><img src=\"data:image/jpeg;base64,{}\" "
                                   "width=200 height=200 alt=\"Sub\"></td>\n".format( diffb64 ) )

            if goodbad is not None:
                isgood = False
                isbad = False
                if objid in goodbad:
                    if goodbad[objid] == "good":
                        isgood = True
                    if goodbad[objid] == "bad":
                        isbad = True
                self.response += "<td>\n"
                self.response += "<input type=\"radio\" value=\"good\" "
                self.response += "name=\"{obj}statusset\" id=\"{obj}statusgood\" ".format( obj=objid )
                self.response += ( "onchange=\"sendgoodbad( &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, "
                                   "&quot;good&quot; )\" ".format( user, passwd, objid ) )
                self.response += "{}>\n".format( "checked" if isgood else "" )
                self.response += "  <label for=\"{obj}statussgood\">Good</label><br>\n".format( obj=objid )
                self.response += "<input type=\"radio\" value='bad' "
                self.response += "name=\"{obj}statusset\" id=\"{obj}statusbad\" ".format( obj=objid )
                self.response += ( "onchange=\"sendgoodbad( &quot;{}&quot;, &quot;{}&quot;, &quot;{}&quot;, "
                                   "&quot;bad&quot; )\"".format( user, passwd, objid ) )
                self.response += "{}>\n".format( "checked" if isbad else "" )
                self.response += "  <label for=\"{obj}statussbad\">Bad</label><br>\n".format( obj=objid )
                self.response += "Current: "
                if isgood:
                    self.response += "<span id=\"{}status\" class=\"good\">Good</span>\n".format(objid)
                elif isbad:
                    self.response += "<span id=\"{}status\" class=\"bad\">Bad</span>\n".format(objid)
                else:
                    self.response += "<span id=\"{}status\"><i>(not set)</i></span>\n".format(objid)

            elif showvetting and ( "vetting" in row ):
                self.response += "<td class=\"vettinglist\">"
                first = True
                for username, score in row["vetting"].items():
                    if first:
                        first = False
                    else:
                        self.response += "<br>"
                    self.response += "{username}: <span class=\"{score}\">{score}</span>".format( username=username,
                                                                                                  score=score )
                self.response += "</td>"
                    
            self.response += "</tr>\n"
        self.response += "</table>\n</form>\n"

        self.response += setallunsetbadbutton

        
    def check_scan_user( self, data ):
        if "user" not in data:
            rval = { "error": "No user specified" }
            return json.dumps(rval)
        if "password" not in data:
            rval = { "error": "No password given" }
            return json.dumps(rval)
        cursor = self.db.cursor( cursor_factory = psycopg2.extras.DictCursor )
        query = "SELECT username,password FROM scanusers WHERE username=%s"
        cursor.execute( query, ( data["user"], ) )
        rows = cursor.fetchall()
        cursor.close()
        if len(rows) == 0:
            rval = { "error": "Unknown user {}".format( data["user"] ) }
            return json.dumps(rval)
        if rows[0]["password"] != data["password"]:
            rval = { "error": "Incorrect password for {}".format( data["user"] ) }
            return json.dumps(rval)
        return None
        
    def GET( self ):
        response = self.do_the_things()
        self.finalize()
        return response

    def POST( self ):
        response = self.do_the_things()
        self.finalize()
        return response

# ======================================================================

class FrontPage(HandlerBase):
    def do_the_things(self):
        web.header('Content-Type', 'text/html; charset="UTF-8"')
        self.htmltop()
        self.set_state()

        self.response += "<h1>DECAT extragalactic subtraction viewer</h1>\n"

        self.response += "<hr>\n"
        self.response += "<h2>Exposure Search</h2>\n"
        self.response += "<p>Enter dates as yyyy-mm-dd or yyyy-mm-dd hh:mm:ss or yyyy-mm-dd hh:mm:ss-05:00\n"
        self.response += "(the last one indicating a time zone that is 5 hours before UTC)."
        self.response += "<form method=\"POST\" action=\"{}listexp\"><p>\n".format( webapfullurl )
        self.response += "<p>List exposures from date\n";
        self.response += form.Input( name="date0", value=self.state["date0"], type="text" ).render()
        self.response += "\n&nbsp;&nbsp;to&nbsp;&nbsp;\n"
        self.response += form.Input( name="date1", value=self.state["date1"], type="text" ).render() + "</p>\n"
        self.response += "<p>" + form.Checkbox( name="onlygallat", value=self.state["onlygallat"] ).render()
        self.response += form.Dropdown( name="gallatincexc", args=[ ("inc","Only Include"),
                                                                    ("exc", "Exclude") ],
                                        value=self.state["gallatincexc"] ).render()
        self.response += "&nbsp;galactic latitude between&nbsp;"
        self.response += form.Input( name="minb", type="text", size="4", value=self.state["minb"] ).render()
        self.response += "°&nbsp;and&nbsp;"
        self.response += form.Input( name="maxb", type="text", size="4", value=self.state["maxb"] ).render()
        self.response += "°</p>\n<p>"
        self.response += form.Input( name="submit", type="submit", value="List Exposures" ).render()
        self.response += "</p>\n</form>\n"

        self.response += "<hr>\n"
        self.response += "<h2>Candidate Lookup</h2>\n"
        self.response += "<form method=\"POST\" action=\"{}showcand\">\n".format( webapfullurl )
        self.response += form.Input( name="candidate", id="cand49152", type="text" ).render()
        self.response += "\n<br>\n"
        self.response += form.Input( name="submit", type="submit", value="Show" ).render()
        self.response += "\n</form>\n"
        
        self.response += "<hr>\n"
        self.response += "<h2>Candidate Search</h2>\n"
        self.response += "<b>Note: this doesn't seem to work now, times out.</b>"
        self.response += "<form method=\"POST\" action=\"{}findcands\"></p>\n".format( webapfullurl )
        self.response += "<table class=\"candsearchparams\">\n"
        self.response += "<tr><td>Min # Detections:</td><td>"
        self.response += form.Input( name="mindet", type="number",
                                     min="1", max="1000", step="1", value=self.state["mindet"] ).render()
        self.response += "</td></tr>\n<tr><td>Min # rb≥"
        self.response += form.Input( name="rbcut", type="number", min="0", max="1",
                                     step="any", size="4", value=self.state["rbcut"] ).render()
        self.response += "</td><td>"
        self.response += form.Input( name="minrb", type="number", min="0", max="1000",
                                     step="1", value=self.state["minrb"] ).render()
        self.response += "</td></tr>\n<tr><td>Min diff. days detected:</td><td>"
        self.response += form.Input( name="numdays", type="number", min="0", max="1000",
                                     step="1", value=self.state["numdays"] ).render()
        self.response += "</td></tr>\n<tr><td>Min (brightest) mag ≤</td><td>"
        self.response += form.Input( name="minmag", type="number", min="15", max="30",
                                     step="0.1", value=self.state["minmag"] ).render()
        self.response += "</td></tr>\n<tr><td>Max (dimmest) mag ≥</td><td>"
        self.response += form.Input( name="maxmag", type="number", min="15", max="30",
                                     step="0.1", value=self.state["maxmag"] ).render()
        self.response += "</td></tr>\n<tr><td>Limit by RA/Dec?</td><td class=\"left\">"
        self.response += form.Input( name="limitbyradec", type="checkbox", value=self.state["limitbyradec"] ).render()
        self.response += "</td></tr>\n<tr><td>RA ("
        self.response += form.Dropdown( name="raformat", value=self.state["raformat"],
                                        args=[ ("hms","h:m:s"), ("decimalhrs", "decimal hrs"),
                                               ("decimaldeg", "decimal deg") ] ).render()
        self.response += "):</td><td>"
        self.response += form.Input( name="ra", type="text", value=self.state["ra"] ).render()
        self.response += "</td></tr>\n<tr><td>Dec ("
        self.response += form.Dropdown( name="decformat", value=self.state["decformat"],
                                        args=[ ("dms","d:m:s"), ("decimaldeg", "decimal °") ] ).render()
        self.response += "):</td><td>"
        self.response += form.Input( name="dec", type="text", value=self.state["dec"] ).render()
        self.response += "</td></tr>\n<tr><td>Search radius in "
        self.response += form.Dropdown( name="searcunit", value=self.state["searchunit"],
                                        args=[ ("arcsec", "″"), ("arcmin", "′"), ("degree", "°") ] ).render()
        self.response += "</td><td>: "
        self.response += form.Input( name="searchradius", type="text", value=self.state["searchradius"] ).render()
        self.response += "</td></tr>\n<tr><td>"
        self.response += form.Input( name="submit", type="submit", value="Search" ).render()
        self.response += "</td></tr>\n</table>\n</form>\n"


        self.response += "<hr>"
        self.response += "<h2>Candidate Vetting</h2>\n"
        self.response += "<form method=\"POST\" action=\"{}ratecands\"></p>\n".format( webapfullurl )
        self.response += "<table class=\"candsearchparams\">\n"
        self.response += "<tr><td>Username:</td><td>"
        self.response += form.Input( name="user", type="text" ).render()
        self.response += "</td></tr>\n"
        self.response += "<tr><td>Password:</td><td>"
        self.response += form.Input( name="password", type="text" ).render()
        self.response += "</td></tr>\n"
        self.response += "<tr><td>Type of field:</td><td class=\"left\">"
        self.response += form.Dropdown( name="vetfieldtype", args=[ ("gal", "Galactic"),
                                                                    ("exgal", "Extragalactic") ],
                                        value="exgal" ).render()
        self.response += "</td></tr>\n"
        self.response += "<tr><td>Objects vetted by others?</td><td class=\"left\">"
        self.response += form.Dropdown( name="vetprerated", args=[ ("yes", "Yes"), ("no", "No") ],
                                        value="no" ).render()
        self.response += "</td></tr>\n<tr><td>"
        self.response += form.Input( name="submitvet", type="submit", value="Show Objects" ).render()
        self.response += "</td><td>(This takes a little while, be patient.)</td></tr></table>\n"
        self.response += "</form>\n"

        self.response += "<h3>Show vetted candidates</h3>\n"
        self.response += "<p>(Gratuitously sorts by exposure, ccd, object id.  Will take a long time.)</p>"
        self.response += "<form method=\"POST\" action=\"{}showrated\">\n".format( webapfullurl )
        self.response += "<p>"
        self.response += form.Input( name="submitshowvet", type="submit", value="Show Vetted Objects" ).render()
        self.response += "</p>\n</form>\n"
        
        self.htmlbottom()
        sys.stderr.write( "About to return self.response\n" )
        return self.response
        
# ======================================================================

class FindCandidates(HandlerBase):
    def do_the_things(self):
        web.header('Content-Type', 'text/html; charset="UTF-8"')
        self.htmltop()
        self.set_state()
        
        minnum = int( self.state["mindet"] )
        rbcut = float( self.state["rbcut"] )
        minrbnum = int( self.state["minrb"] )
        mindays = int( self.state["numdays"] )
        minmag = float( self.state["minmag"] )
        maxmag = float( self.state["maxmag"] )
        useradec = self.state["limitbyradec"]
        raformat = self.state["raformat"]
        rastr = self.state["ra"]
        decformat = self.state["decformat"]
        decstr = self.state["dec"]
        radformat = self.state["searchunit"]
        try:
            radius = float( self.state["searchradius"] )
        except ValueError:
            radius = 0.

        self.back_to_home()

        if useradec:
            try:
                if raformat == "hms":
                    ra = parsedms( rastr )
                    if ra is None:
                        raise ValueError( "Error parsing RA." )
                    ra = 15. * ra
                elif raformat == "decimalhrs":
                    ra = 15. * float( rastr )
                elif raformat == "decimaldeg":
                    ra = float(rastr)
                else:
                    raise ValueError( "Unknown RA format \"" + sanitizeHTML( raformat, True ) + "\"" )
            except Exception as e:
                self.response += ( "<p>Error parsing RA: " + sanitizeHTML( rastr, True ) + " as " +
                                   sanitizeHTML( raformat, True) + "</p>" )
                self.htmlbottom()
                return self.response
            try:
                if decformat == "dms":
                    dec = parsedms( decstr )
                    if dec is None:
                        raise ValueError( "Error parsing Dec." )
                elif decformat == "decimaldeg":
                    dec = float( decstr )
                else:
                    raise ValueError( "Unknown Dec format \"" + sanitizeHTML( decformat, True ) + "\"" )
            except Exception as e:
                self.response += ( "<p>Error parsing Dec: " + sanitizeHTML( decstr, True ) + " as " +
                                   sanitizeHTML( decformat, True) + "</p>" )
                self.htmlbottom()
                return self.response
            if radformat == "arcmin":
                radius /= 60.
                radstr = "′"
            elif radformat == "arcsec":
                radius /= 3600.
                radstr = "″"
            else:
                radstr = "°"
            radecquerystr = 'WHERE q3c_radial_query(c.ra,c.dec,{},{},{}) '.format( ra, dec, radius )
            responsestr = ' within {:.04f}° of ({:.4f}, {:.4f})'.format( radius, ra, dec )
        else:
            radecquerystr = ''
            responsestr = ''
                
        self.response += ( "<h4>Candidates with ≥{} detections (≥{} with rb≥{:.2f})<br>\n"
                           .format( minnum, minrbnum, rbcut ) )
        self.response += ( "seen at ≥{} days apart with brightest mag. ≤{:.2f} and dimmest mag. ≥{:.2f}{}</h4>\n"
                           .format( mindays, minmag, maxmag, responsestr ) )
                           
        cursor = self.db.cursor( cursor_factory = psycopg2.extras.DictCursor )

        # One early days check suggested this returned 1/20 of the whole candidates table
        query = ( "SELECT c.id,count(o.id) AS countobj,max(o.rb) AS maxrb "
                  "FROM candidates c "
                  "INNER JOIN objects o ON o.candidate_id=c.id " )
        query += "{}".format( radecquerystr )
        query += ( "GROUP BY (c.id) "
                   "HAVING count(o.id)>=%s AND max(o.rb)>=%s " 
                   "ORDER BY c.id " )
        # sys.stderr.write( "Sending query {}\n".format( cursor.mogrify( query, (minnum,rbcut) ) ) )
        cursor.execute( query, ( minnum, rbcut ) )
        rows = cursor.fetchall()
        if len(rows) == 0:
            self.response += "<p>None found.</p>"
            self.htmlbottom()
            cursor.close()
            return self.response
        self.response += "<p>Initial query returned {} candidates</p>\n".format( len(rows) )
        # sys.stderr.write( "Initial query returned {} candidates\n".format( len(rows) ) )
        
        candlist = []
        cands = {}
        for row in rows:
            cid = row["id"]
            candlist.append( cid )
            cands[cid] = {}
            cands[cid]["numobj"] = row["countobj"]
            cands[cid]["jdlist"] = []
            cands[cid]["filterlist"] = []
            cands[cid]["maglist"] = []
            cands[cid]["rblist"] = []
            cands[cid]["numhighrb"] = 0
            cands[cid]["minjd"] = 1e32
            cands[cid]["maxjd"] = 0
            cands[cid]["minmag"] = 50
            cands[cid]["maxmag"] = 0

        query = ( "SELECT c.id AS candid,o.id AS objid,o.rb,o.mag,e.mjd,e.filter,c.ra,c.dec "
                  "FROM objects o "
                  "INNER JOIN subtractions s ON o.subtraction_id=s.id "
                  "INNER JOIN exposures e ON s.exposure_id=e.id "
                  "INNER JOIN candidates c ON o.candidate_id=c.id "
                  "WHERE c.id IN %s" )
        # sys.stderr.write( "Sending query {}\n".format( cursor.mogrify( query, ( tuple(candlist), ) ) ) )
        cursor.execute( query, ( tuple(candlist), )  )
        rows=cursor.fetchall()
        cursor.close()

        for row in rows:
            cid = row["candid"]
            mjd = row["mjd"]
            mag = row["mag"]
            filt = row["filter"]
            rb = row["rb"]
            ra = row["ra"]
            dec = row["dec"]
            cands[cid]["jdlist"].append( mjd )
            cands[cid]["filterlist"].append( filt )
            cands[cid]["maglist"].append( mag )
            cands[cid]["rblist"].append( rb )
            cands[cid]["ra"] = ra
            cands[cid]["dec"] = dec
            if mjd < cands[cid]["minjd"]:
                cands[cid]["minjd"] = mjd
            if mjd > cands[cid]["maxjd"]:
                cands[cid]["maxjd"] = mjd
            if mag < cands[cid]["minmag"]:
                cands[cid]["minmag"] = mag
            if mag > cands[cid]["maxmag"]:
                cands[cid]["maxmag"] = mag
            if rb >= rbcut:
                cands[cid]["numhighrb"] += 1

        # ****
        # self.response += "<ul>\n"
        # for c in candlist:
        #     self.response += ( "<li>{} ; Δjd={:.1f}; minmag={:.2f}; maxmag={:.2f}; numhighrb={}</li>\n"
        #                        .format( c, cands[c]["maxjd"] - cands[c]["minjd"], cands[c]["minmag"],
        #                                 cands[c]["maxmag"], cands[c]["numhighrb"], ) ) #cands[c]["rblist"] ) )
        # self.response += "</ul>\n"
        # ****
                
        candlist = [ c for c in candlist if ( ( cands[c]["numhighrb"] >= minrbnum ) and
                                              ( cands[c]["minmag"] <= minmag ) and
                                              ( cands[c]["maxmag"] >= maxmag ) and
                                              ( cands[c]["maxjd"] - cands[c]["minjd"] >= mindays ) ) ]

        self.response += "<p>After cuts, {} remain.</p>\n".format( len(candlist) )
        # sys.stderr.write( "After cuts, {} remain.\n".format( len(candlist) ) )
        
        self.response += "<form method=\"POST\" action=\"{}showcand\">\n".format( webapfullurl )
        self.hidden_state()
        self.response += "<table class=\"candlist\">"
        self.response += "<tr><th>Candidate</th>"
        self.response += "<th># Det</th>"
        self.response += "<th>rb≥{:.2f}</th>".format(rbcut)
        self.response += "<th>dimmest</th>"
        self.response += "<th>brightest</th>"
        self.response += "<th>t0</th>"
        self.response += "<th>t1</th>"
        self.response += "<th>ra</th>"
        self.response += "<th>dec</th>"
        self.response += "<th>ltcv</th></tr>\n"

        for cand in candlist:
            if False:
                jdlist = numpy.array( cands[cand]["jdlist"] )
                filterlist = numpy.array( cands[cand]["filterlist"] )
                maglist = numpy.array( cands[cand]["maglist"] )
                rblist = numpy.array( cands[cand]["rblist"] )
                dex = numpy.argsort( jdlist )
                jdlist = jdlist[dex]
                filterlist = filterlist[dex]
                maglist = maglist[dex]
                rblist = rblist[dex]
                datelist = numpy.empty( jdlist.shape, dtype=numpy.str )
                for i in range(0, len(datelist)):
                    Y, M, D = dateofmjd( jdlist[i] )
                    datelist[i] = "{:04n}-{:02n}-{:02n}".format( Y, M, D )
                uniqfilt = []
                for f in filterlist:
                    if not ( f in uniqfilt ):
                        uniqfilt.append( uniqfilt )

            y0, m0, d0 = dateofmjd( cands[cand]["minjd"] )
            y1, m1, d1 = dateofmjd( cands[cand]["maxjd"] )
                        
            self.response += ( "<tr><td><button class=\"link\" name=\"candidate\" "
                               "value=\"{cand}\">{cand}</button></td>".format( cand=cand ) )
            self.response += "<td>{}</td>".format( cands[cand]["numobj"] )
            self.response += "<td>{}</td>".format( cands[cand]["numhighrb"] )
            self.response += "<td>{:.2f}</td>".format( cands[cand]["maxmag"] )
            self.response += "<td>{:.2f}</td>".format( cands[cand]["minmag"] )
            self.response += "<td>{:04n}-{:02n}-{:02n}</td>".format( y0, m0, d0 )
            self.response += "<td>{:04n}-{:02n}-{:02n}</td>".format( y1, m1, d1 )
            self.response += "<td>{}</td>".format( dtohms( cands[cand]["ra"] ) )
            self.response += "<td>{}</td>".format( dtodms( cands[cand]["dec"] ) )
            if False:
                self.response += "<td><table class=\"ltcv\">\n  <tr>"
                for f in uniqfilt:
                    self.response += "<th>{}</th>".format(f)
                self.response += "<tr>\n"
                for f in uniqfilt:
                    self.response += "    <td><table class=\"ltcvf\">\n"
                    for i in range(0, len(datelist)):
                        if filterlist[i] == f:
                            self.response += "      <tr><td>{}</td><td>{:.02f}</td></tr>\n".format( datelist[i],
                                                                                                    maglist[i] )
                    self.response += "    </table></td>\n"
                self.response += "  </tr>\n</td>"
            self.response += "</tr>\n"

        self.htmlbottom()
        return self.response
    
# ======================================================================
    
class ListExposures(HandlerBase):
    def do_the_things(self):
        web.header('Content-Type', 'text/html; charset="UTF-8"')
        self.htmltop()
        self.set_state()
        
        if len(self.state["date0"].strip()) == 0:
            self.state["date0"] = "1970-01-01"
        if len(self.state["date1"].strip()) == 0:
            self.state["date1"] = "2999-12-31"
        date0 = self.state["date0"].strip()
        date1 = self.state["date1"].strip()
        limitbygallat = self.state["onlygallat"]
        excludelatrange = self.state["gallatincexc"] == "exc"
        minb = float( self.state["minb"] )
        maxb = float( self.state["maxb"] )
            
        try:    
            t0 = dateutil.parser.parse( date0 )
            if t0.tzinfo is None:
                t0 = pytz.utc.localize( t0 )
            t0 = t0.astimezone( pytz.utc )
            t1 = dateutil.parser.parse( date1 )
            if t1.tzinfo is None:
                t1 = pytz.utc.localize( t1 )
            t1 = t1.astimezone( pytz.utc )
        except ValueError as ex:
            self.response += "<p>...error parsing your dates... go back.</p>\n"
            self.htmlbottom()
            return self.response

        mjd0 = mjd( t0.year, t0.month, t0.day, t0.hour, t0.minute, t0.second )
        mjd1 = mjd( t1.year, t1.month, t1.day, t1.hour, t1.minute, t1.second )

        # self.response += "<p>{} is {},{},{},{},{} and mjd {}</p>\n".format( date0, t0.year, t0.month, t0.day,
        #                                                                     t0.hour, t0.minute, mjd0 )
        # self.response += "<p>{} is {},{},{},{},{} and mjd {}</p>\n".format( date1, t1.year, t1.month, t1.day,
        #                                                                     t1.hour, t1.minute, mjd1 )

        self.back_to_home()
        
        self.response += "<h4>Exposures from {} to {}\n".format( t0.isoformat(), t1.isoformat() )
        if limitbygallat:
            self.response += "excluding " if excludelatrange else "with "
            self.response += "{:.2f} ≤ b ≤ {:.2f}".format( minb, maxb )
        self.response += "</h4>\n"
            
        exposures = {}
        exporder = []
        
        # sys.stderr.write("ListExposures about to send DB query\n")
        cursor = self.db.cursor( )
        query = ( "SELECT e.filename,e.filter,COUNT(s.id) FROM exposures e "
                  "LEFT JOIN subtractions s ON s.exposure_id=e.id "
                  "WHERE e.mjd>=%s AND e.mjd<=%s " )
        if limitbygallat:
            if excludelatrange:
                query += "AND ( e.gallat<%s OR e.gallat>%s ) "
            else:
                query += "AND e.gallat>%s AND e.gallat<%s "
                
        query += "GROUP BY e.filename,e.filter,e.mjd,e.gallat ORDER BY e.mjd"
        if limitbygallat:
            cursor.execute(query, (mjd0, mjd1, minb, maxb) )
        else:
            cursor.execute(query, (mjd0, mjd1) )
        rows = cursor.fetchall()
        for row in rows:
            exporder.append( row[0] )
            exposures[ row[0] ] = { "filter": row[1], "nsubs": row[2] }

        if len(exporder) == 0:
            self.response += "<p>No exposures!</p>\n"
            self.htmlbottom()
            cursor.close()
            return self.response
            
        query = ( "SELECT filename,ra,dec,header->'EXPTIME' FROM exposures WHERE filename IN %s" )
        # sys.stderr.write( "{}\n".format( cursor.mogrify( query, ( tuple(exporder), ) ) ) )
        cursor.execute( query, ( tuple(exporder), ) )
        rows = cursor.fetchall()
        for row in rows:
            if not row[0] in exposures:
                sys.stderr.write("WARNING: exposure {} found in object query, not ra/dec query!"
                                 .format( row[0] ))
            exposures[ row[0] ]["ra"] = float( row[1] )
            exposures[ row[0] ]["dec"] = float( row[2] )
            exposures[ row[0] ]["exptime"] = float( row[3] )
            
        query = ( "SELECT e.filename,COUNT(o.id) FROM OBJECTS o "
                  "INNER JOIN subtractions s ON o.subtraction_id=s.id "
                  "RIGHT JOIN exposures e ON s.exposure_id=e.id "
                  "WHERE e.filename IN %s "
                  "GROUP BY e.filename,e.filter,e.mjd "
                  "ORDER BY e.mjd " )
        cursor.execute( query, ( tuple(exporder), ) )
        rows = cursor.fetchall()
        for row in rows:
            if not row[0] in exposures:
                sys.stderr.write("WARNING: exposure {} found in object query, not subtraction query!"
                                 .format( row[0] ))
                exposures[ row[0] ] = { "nsubs": "??" }
                exporder.append( row[0] )    # will be out of order!!!!!
            exposures[ row[0] ]["nobjs"] = row[1]

        query = ( "SELECT e.filename,COUNT(o.id) FROM OBJECTS o "
                  "INNER JOIN subtractions s ON o.subtraction_id=s.id "
                  "RIGHT JOIN exposures e ON s.exposure_id=e.id "
                  "WHERE o.rb>=0.6 AND e.filename IN %s"
                  "GROUP BY e.filename,e.filter,e.mjd "
                  "ORDER BY e.mjd " )
        cursor.execute( query, ( tuple(exporder), ) )
        rows = cursor.fetchall()
        for row in rows:
            exposures[ row[0] ]["nhighrb"] = row[1]

        # Count the number that have made it through event id type "objectslogged" (27)
        query = ( "SELECT e.filename,COUNT(p.id) FROM exposures e "
                  "INNER JOIN processcheckpoints p ON e.id=p.exposure_id "
                  "WHERE e.filename IN %s AND p.event_id=27 "
                  "GROUP BY e.filename" )
        cursor.execute( query, ( tuple(exporder), ) )
        rows = cursor.fetchall()
        for row in rows:
            exposures[ row[0] ]["nfinished"] = row[1]

        # Count the number that have errors (999)
        query = ( "SELECT e.filename,COUNT(p.id) FROM exposures e "
                  "INNER JOIN processcheckpoints p ON e.id=p.exposure_id "
                  "WHERE e.filename IN %s AND p.event_id=999 "
                  "GROUP BY e.filename" )
        cursor.execute( query, ( tuple(exporder), ) )
        rows = cursor.fetchall()
        for row in rows:
            exposures[ row[0] ]["nerrors"] = row[1]
            
        cursor.close()
            
        self.response += "<p>Number of objects per page: <input type=\"number\" name=\"numperpage\" value=100><br>\n"
        self.response += "Only include ccd numbers (comma-sep): "
        self.response += form.Input( name="ccds", type="text", value=self.state["ccds"] ).render()
        self.response += "\n<br>\n  Order by:\n"
        self.response += form.Radio( name="orderby", value=self.state["orderby"],
                                     args=[ ("real/bogus", "Real/Bogus"), ("objnum", "ObjectNum.") ] ).render()
        self.response += "\n<br>\n"
        self.response += form.Checkbox( id="showvetting", name="showvetting",
                                        value=self.state["showvetting"] ).render()
        self.response += " show manual vetting?</p>\n<p>"
        # self.hidden_state( omit=["ccds", "orderby", "showrb", "showvetting" ] )

        self.response += "<table class=\"exposurelist\">\n"
        self.response += ( "<tr><th>Exposure</th><th>Filter</th><th>t_exp</th>"
                           "<th>ra</th><th>dec</th><th>l</th><th>b</th>"
                           "<th>#Subs</th><th>#Done</th><th>N. Objects</th>"
                           "<th>rb>=0.6</th></tr>\n" )
        for exp in exporder:
            ra = exposures[exp]["ra"]
            dec = exposures[exp]["dec"]
            l,b = radectolb( ra, dec )
            self.response += '<tr><td>{exp}</td>\n'.format(exp=exp);
            self.response += "  <td>{}</td>\n".format( exposures[exp]["filter"] )
            self.response += "  <td>{}</td>\n".format( exposures[exp]["exptime"] )
            self.response += '  <td>{}</td>\n'.format(dtohms(ra))
            self.response += '  <td>{}</td>\n'.format(dtodms(dec))
            self.response += '  <td>{:.02f}</td>\n'.format(l)
            self.response += '  <td>{:.02f}</td>\n'.format(b)
            self.response += "  <td>{}</td>\n".format( exposures[exp]["nsubs"] )
            if "nfinished" in exposures[exp]:
                self.response += "  <td>{}</td>\n".format( exposures[exp]["nfinished"] )
            else:
                self.response += "  <td>—</td>\n"
            self.response += "  <td>{}</td>\n".format( exposures[exp]["nobjs"] )
            if "nhighrb" in exposures[exp]:
                self.response += "  <td>{}</td>\n".format( exposures[exp]["nhighrb"] )
            else:
                self.response += "  <td>—</td>\n"
            self.response += ( "  <td><button type=\"submit\" name=\"submit\" value=\"Show Objects\" "
                               "onclick=\"showobjects('{}')\">Show Objects</button></td>\n".format( exp ) )
            self.response += ( "  <td><button type=\"submit\" name=\"submit\" value=\"Show Log\" "
                               "onclick=\"showlog('{}')\">Show Log</button></td>\n".format( exp ) )
            if ( "nerrors" in exposures[exp] ) and ( exposures[exp]["nerrors"] > 0 ):
                self.response += ( "  <td class=\"bad\">{} errors</td>\n".format( exposures[exp]["nerrors"] ) )
            self.response += "</tr>\n"
            
        self.response += "</table>\n"

        self.htmlbottom()
        return self.response

# ======================================================================

class ShowExposure(HandlerBase):
    
    def do_the_things(self):
        web.header('Content-Type', 'text/html; charset="UTF-8"')
        self.htmltop()
        self.set_state()

        # sys.stderr.write( "ShowExposure webinput = {}, state = {}\n".format( json.dumps( self.webinput ),
        #                                                                      json.dumps( self.state ) ) )
                
        if self.state["whattodo"] == "Show Objects":
            self.show_objects()
        elif self.state["whattodo"] == "Show Log":
            self.show_log()
        else:
            self.response += "<p>Error, unknown whattodo \"{}\"</p>\n".format( self.state["whattodo"] )
            
        self.htmlbottom()
        return self.response

    # ========================================
    
    def show_objects( self ):
        offset = int( self.state["offset"] )
        if offset < 0: offset = 0
        numperpage = int( self.state["numperpage"] )
        filename = self.state["exposure"]
        orderby = self.state["orderby"]
        showvetting = self.state["showvetting"]
        
        ccdarr = self.state["ccds"].split(",")
        if len(ccdarr) == 0: ccds = None
        else:
            ccdnums = []
            for i in ccdarr:
                try:
                    val = int(i)
                except ValueError:
                    continue
                else:
                    ccdnums.append( val )
            if len(ccdnums) == 0:
                ccds = None
            else:
                ccds = "("
                first = True
                for num in ccdnums:
                    if first: first=False
                    else: ccds += ","
                    ccds += '{}'.format(num)
                ccds += ")"

        query = ( "SELECT COUNT(o.id) "
                  "FROM objects o "
                  "INNER JOIN subtractions s ON o.subtraction_id=s.id "
                  "INNER JOIN exposures e ON s.exposure_id=e.id "
                  "WHERE e.filename=%s " )
        if ccds is not None:
            query += " AND s.ccdnum IN {} ".format(ccds)
        cursor = self.db.cursor( )
        # sys.stderr.write( "Sending query \"{}\"\n".format( cursor.mogrify( query, [ filename ] ) ) )
        cursor.execute( query, ( filename, ) )
        row = cursor.fetchone()
        cursor.close()
        numobjs = int(row[0])

        self.prevnext( self.state, numobjs )

        self.response += "<h3>Exposure: {}</h3>\n".format( filename )
        self.response += "<h4>Candidates starting at offset {} out of {}</h4>\n".format( offset, numobjs )

        query = ( "SELECT c.id as cid,o.id as oid,o.rb,o.ra,o.dec,s.ccdnum,e.filename, "  # tg.knopgood,tg.nugentgood,"
                  "ENCODE(cu.sci_jpeg, 'base64') as scijpg, "
                  "ENCODE(cu.ref_jpeg, 'base64') as refjpg, "
                  "ENCODE(cu.diff_jpeg, 'base64') as diffjpg "
                  "FROM objects o "
                  "INNER JOIN candidates c ON o.candidate_id=c.id "
                  "INNER JOIN subtractions s ON o.subtraction_id=s.id "
                  "INNER JOIN exposures e ON s.exposure_id=e.id "
                  "LEFT JOIN cutouts cu ON cu.object_id=o.id "
                  # "LEFT JOIN tmpobjgood tg ON tg.objid=o.id "
                  "WHERE e.filename=%s " );
        if ccds is not None:
            query += ' AND s.ccdnum IN {} '.format(ccds)
        if orderby == "real/bogus":
            query += " ORDER BY o.rb DESC "
        elif orderby == "objnum":
            query += " ORDER BY o.id "
        query += " LIMIT %s OFFSET %s"
        # sys.stderr.write("Sending query \"{}\"\n".format(query))
        cursor = self.db.cursor(  cursor_factory = psycopg2.extras.DictCursor )
        cursor.execute( query, ( filename, numperpage, offset ) )
        rows = cursor.fetchall()
        cursor.close()

        objects = [ dict(row) for row in rows ]
        oids = [ o["oid"] for o in objects ]
        objdict = {}
        for obj in objects:
            objdict[obj["oid"]] = obj
        
        if showvetting:
            query = "SELECT object_id,username,goodbad FROM scanscore WHERE object_id IN %s"
            cursor = self.db.cursor( cursor_factory=psycopg2.extras.DictCursor )
            cursor.execute( query, ( tuple(oids), ) )
            rows = cursor.fetchall()
            cursor.close()
            for row in rows:
                if not "vetting" in objdict[row["object_id"]]:
                    objdict[row["object_id"]]["vetting"] = {}
                objdict[row["object_id"]]["vetting"][row["username"]] = row["goodbad"]
                
        self.objecttable( objects, showvetting=showvetting )
        
        self.prevnext( self.state, numobjs )

    # ========================================
        
    def show_log( self ):
        query = ( "SELECT p.created_at,p.ccdnum,p.running_node,p.mpi_rank,p.notes,c.description,p.event_id "
                  "FROM processcheckpoints p "
                  "INNER JOIN exposures e ON p.exposure_id=e.id "
                  "LEFT JOIN checkpointeventdefs c ON p.event_id=c.id "
                  "WHERE e.filename=%s ORDER BY p.created_at" )
        cursor = self.db.cursor( cursor_factory = psycopg2.extras.DictCursor )
        cursor.execute( query, ( self.state["exposure"], ) )
        rows = cursor.fetchall()
        cursor.close()

        self.response += "<h2>{}</h2>\n".format (self.state["exposure"] )

        if len(rows) == 0:
            self.response += "<p>No log information.</p>\n"
            return

        self.response += "<p>Ran on {}</p>\n".format( rows[0]["running_node"] )

        hassub = [False] * 64
        hasobj = [False] * 64
        haserr = [False] * 64
        hasinf = [False] * 64
        for row in rows:
            if row["ccdnum"] == -1:
                if row["event_id"] == 999:
                    for i in range(0, 64):
                        haserr[i] = True
                if row["event_id"] == 998:
                    for i in range(0, 64):
                        hasinf[i] = True
            else:
                if row["event_id"] == 20:
                    hassub[row["ccdnum"]] = True
                if row["event_id"] == 27:
                    hasobj[row["ccdnum"]] = True
                if row["event_id"] == 999:
                    haserr[row["ccdnum"]] = True
                if row["event_id"] == 998:
                    hasinf[row["ccdnum"]] = True

        self.response += "<p>CCDs without subtraction: "
        for i in range(1, 63):
            if not hassub[i]:
                self.response += '&nbsp;<a href="#{num}">{num}</a>&nbsp;\n'.format( num=i )
        self.response += "</p>"

        self.response += "<p>CCDs without object detection: "
        for i in range(1, 63):
            if not hasobj[i]:
                self.response += '&nbsp;<a href="#{num}">{num}</a>&nbsp;\n'.format( num=i )
        self.response += "</p>"

        self.response += "<p>CCDs with errors logged: "
        for i in range(1, 63):
            if haserr[i]:
                self.response += '&nbsp;<a href="#{num}">{num}</a>&nbsp;\n'.format( num=i )
        self.response += "</p>"
        
        self.response += "<p>CCDs with info logged: "
        for i in range(1, 63):
            if hasinf[i]:
                self.response += '&nbsp;<a href="#{num}">{num}</a>&nbsp;\n'.format( num=i )
        self.response += "</p>"
        
        
        self.response += "<p>Jump to CCD:\n"
        for i in range(1, 63):
            self.response += '&nbsp;<a href="#{num}">{num}</a>&nbsp;\n'.format( num=i )
        self.response += "</p>\n"

        for i in range(1, 63):
            self.response += "<h3 id=\"{num}\">CCD {num}</h3>\n".format( num=i  )

            self.response += "<table class=\"logtable\">\n"
            self.response += "<tr><th>CCD</th><th>Rank</th><th>Time</th><th>Event</th><th>Notes</th></tr>\n"
            
            for row in rows:
                if row["ccdnum"] == -1 or row["ccdnum"] == i:
                    self.response += "<tr><td>{}</td>\n".format( row["ccdnum"] )
                    self.response += "  <td>{}</td>\n".format( row["mpi_rank"] )
                    # self.response += "  <td>{}</td>\n".format( row["created_at"].isoformat( timespec="seconds") )
                    self.response += "  <td>{}</td>\n".format( row["created_at"].strftime( "%Y-%m-%d %H:%M:%S" ) )
                    self.response += "  <td>{}</td>\n".format( row["description"] )
                    if row["notes"] is not None:
                        self.response += "  <td>{}</td>\n".format( row["notes"] )
                    else:
                        self.response += "  <td></td>\n"
                    self.response += "</tr>\n"

            self.response += "</table>\n"


# ======================================================================

class ShowCandidate(HandlerBase):
    def do_the_things( self ):
        web.header('Content-Type', 'text/html; charset="UTF-8"')
        self.htmltop()
        self.set_state()

        self.back_to_home()

        self.response += "<h3>Candidate: {}</h3>\n".format( self.state["candidate"] )
        self.response += ( "<p>(<a href=\"{}showcand?candidate={}\">Share Link</a>)</p>\n"
                           .format( webapfullurl, self.state[ "candidate" ] ) )

        cursor = self.db.cursor( cursor_factory = psycopg2.extras.DictCursor )
        query = ( "SELECT * FROM candidates WHERE id=%s" )
        cursor.execute( query, ( self.state["candidate"], ) )
        rows = cursor.fetchall()
        if len(rows) == 0:
            self.db.close()
            self.response += "<p>No candidate {}</p>\n".format( self.state["candidate"] )
            self.htmlbottom()
            return self.response
        candidate = rows[0]

        query= ( "SELECT o.id,o.ra,o.dec,o.created_at,o.modified,o.rb,o.mag,o.magerr, "
                 "e.filename,e.filter,e.mjd, "
                 "ENCODE(c.sci_jpeg, 'base64') as sci_jpeg, "
                 "ENCODE(c.ref_jpeg, 'base64') as ref_jpeg, "
                 "ENCODE(c.diff_jpeg, 'base64') as diff_jpeg "
                 "FROM objects o "
                 "INNER JOIN subtractions s ON o.subtraction_id=s.id "
                 "INNER JOIN exposures e ON s.exposure_id=e.id "
                 "LEFT JOIN cutouts c ON c.object_id=o.id "
                 "WHERE o.candidate_id=%s ORDER BY e.mjd,e.filter" )
        # sys.stderr.write( "{}\n".format( cursor.mogrify( query, ( self.state["candidate"], ) ) ) )
        cursor.execute( query, ( self.state["candidate"], ) )
        rows = cursor.fetchall()
        cursor.close()
        
        self.response += ( "<p><a href=\"https://www.legacysurvey.org/viewer?ra={:.5f}&dec={:.5f}&zoom=16&layer=dr8&mark={:.5f},{:.5f}\">"
                           .format( rows[0]["ra"], rows[0]["dec"], rows[0]["ra"], rows[0]["dec"] ) )
        self.response += "Desi Viewer at this position</a></p>"

        
        self.response += "<form method=\"post\" action=\"{}showexp\"></p>\n".format( webapfullurl )
        self.hidden_state( omit=["exposure"] )
        self.response += "<table class=\"maintable\">\n"
        self.response += "<tr><th>Exposure</th><th>New</th><th>Ref</th><th>Sub</th></tr>\n"

        for row in rows:
            # Make exposure a button that looks like a link
            self.response += "<tr>\n<td>Exposure: {}<br>\n".format( row["filename"] )
            self.response += "MJD: {}<br>\n".format( row["mjd"] )
            self.response += "Filter: {}<br>\n".format( row["filter"] )
            self.response += "Mag: {:.2f}±{:.2f}<br>\n".format( row["mag"], row["magerr"] )
            self.response += "R/B: {:.3f}\n</td>\n".format( row["rb"] )
            if row["sci_jpeg"] is None:
                self.response += "<td>(Sci cutout missing)</td>\n"
            else:
                self.response += ( "<td><img src=\"data:image/jpeg;base64,{}\" width=204 "
                                   "height=204 alt=\"New\"></td>\n" ).format( row["sci_jpeg"] )
            if row["ref_jpeg"] is None:
                self.response += "<td>(Ref cutout missing)</td>\n"
            else:
                self.response += ( "<td><img src=\"data:image/jpeg;base64,{}\" width=204 "
                                   "height=204 alt=\"New\"></td>\n" ).format( row["ref_jpeg"] )
            if row["diff_jpeg"] is None:
                self.response += "<td>(Diff cutout missing)</td>\n"
            else:
                self.response += ( "<td><img src=\"data:image/jpeg;base64,{}\" width=204 "
                                   "height=204 alt=\"New\"></td>\n" ).format( row["diff_jpeg"] )
            self.response += "</tr>\n"
        self.response += "</table>\n"
                
        return self.response

# ======================================================================

class RateCands(HandlerBase):
    def do_the_things( self ):
        web.header('Content-Type', 'text/html; charset="UTF-8"')
        self.htmltop()
        self.set_state()
        self.back_to_home()

        rval = self.check_scan_user( self.webinput )
        if rval is not None:
            rval = json.loads( rval )
            self.response += "<p>Error: {}".format( rval["error"] )
            self.htmlbottom()
            return self.response

        cursor = self.db.cursor( cursor_factory = psycopg2.extras.DictCursor )

        if self.state["vetprerated"] == "yes":
            # Get a random set of candidates ranked by others not by us
            query = ( "SELECT oid,users,exposure_id,cid,rb,ra,dec,ccdnum,filename FROM "
                      " ( SELECT ss.object_id as oid,array_agg(ss.username) as users, "
                      "       subs.exposure_id,c.id as cid,o.rb,o.ra,o.dec,subs.ccdnum,e.filename "
                      "   FROM scanscore ss "
                      "   INNER JOIN objects o ON ss.object_id=o.id "
                      "   INNER JOIN candidates c ON o.candidate_id=c.id "
                      "   INNER JOIN subtractions subs ON o.subtraction_id=subs.id "
                      "   INNER JOIN exposures e ON subs.exposure_id=e.id " )
            if self.state["vetfieldtype"] == "gal":
                query += "   WHERE gallat < 20 AND gallat > -20 "
            else:
                query += "   WHERE gallat >= 20 OR gallat <= -20 "
            query += ( "   GROUP BY ss.object_id,subs.exposure_id,subs.ccdnum,c.id,o.rb,o.ra,o.dec,e.filename) x "
                       "WHERE %s != ALL(users) "
                       "ORDER BY RANDOM() LIMIT 100" )
            # sys.stderr.write( 'Candidate selection query: {}\n'
            #                   .format( cursor.mogrify(query, (self.state['user'],)) ) )
            cursor.execute( query, ( self.state['user'], ) )
            objects = cursor.fetchall()
            # sys.stderr.write( "Objects fetched from query.\n" )
            
        else:
            # First, get the list of relevant exposures
            query = "SELECT id,filename FROM exposures "
            if self.state["vetfieldtype"] == "gal":
                query += "WHERE gallat < 20 AND gallat > -20 "
            else:
                query += "WHERE gallat >= 20 OR gallat <= -20 "
            query += "ORDER BY id"
            cursor.execute( query )
            rows = cursor.fetchall()
            expids = []
            exposurenames = {}
            for row in rows:
                expids.append( row["id"] )
                exposurenames[row["id"]] = row["filename"]

            # Randoly select 100 objects from this list of exposures
            query = ( "SELECT c.id as cid,o.id as oid,o.rb,o.ra,o.dec,s.ccdnum,s.exposure_id "
                      "FROM OBJECTS o "
                      "INNER JOIN candidates c ON o.candidate_id=c.id "
                      "INNER JOIN subtractions s ON o.subtraction_id=s.id "
                      "WHERE s.exposure_id IN %s "
                      "ORDER BY RANDOM() LIMIT 100" )
            # sys.stderr.write( "Bigass query started at {}\n".format( time.ctime() ) )
            cursor.execute( query, ( tuple(expids), ) )
            objects = cursor.fetchall()
            # sys.stderr.write( "Objects fetched from query at {}\n".format( time.ctime() ) )

        if len(objects) == 0:
            self.response += "<p>No objects found matching criteria.</p>"
            self.htmlbottom()
            return self.response
            
        if len(objects) < 100:
            objects = [ dict(o) for o in objects ]
        else:
            objects = [ dict(o) for o in objects[0:100] ]
        oids = [ o["oid"] for o in objects ]
        objdict = {}
        for obj in objects:
            if "filename" not in obj:
                obj["filename"] = exposurenames[obj["exposure_id"]]
            obj["scijpg"] = None
            obj["refjpg"] = None
            obj["diffjpg"] = None
            objdict[ obj["oid"] ] = obj

        query = ( "SELECT o.id as oid, "
                  "ENCODE(cu.sci_jpeg, 'base64') as scijpg, "
                  "ENCODE(cu.ref_jpeg, 'base64') as refjpg, "
                  "ENCODE(cu.diff_jpeg, 'base64') as diffjpg "
                  "FROM cutouts cu INNER JOIN objects o ON cu.object_id=o.id "
                  "WHERE o.id IN %s" )
        # sys.stderr.write( "Sending query {}\n".format( cursor.mogrify( query, ( tuple(oids), ) ) ) )
        cursor.execute( query, ( tuple(oids), ) )
        rows = cursor.fetchall()
        for row in rows:
            oid = row["oid"]
            if not oid in objdict:
                sys.stderr.write( "WARNING: {} in cutouts query but not object list!\n".format( row["oid"] ) )
            else:
                objdict[oid]["scijpg"] = row["scijpg"]
                objdict[oid]["refjpg"] = row["refjpg"]
                objdict[oid]["diffjpg"] = row["diffjpg"]

        query = ( "SELECT object_id,goodbad FROM scanscore WHERE username=%s AND object_id IN %s" )
        cursor.execute( query, ( self.webinput["user"], tuple(oids) ) )
        rows = cursor.fetchall()
        goodbad = {}
        for row in rows:
            goodbad[ row["object_id"] ] = row["goodbad"]

        self.response += '<form method=\"POST\" action=\"{}ratecands\">\n'.format( webapfullurl )
        self.hidden_state()
        self.response += "<p><button type=\"submit\">Give Me More</button></p>\n"
        self.response += "</form>"
            
        self.objecttable( objects, goodbad=goodbad, user=self.webinput["user"], passwd=self.webinput["password"] )
        
        self.response += '<form method=\"POST\" action=\"{}ratecands\">\n'.format( webapfullurl )
        self.hidden_state()
        self.response += "<p><button type=\"submit\">Give Me More</button></p>\n"
        self.response += "</form>"
            
        self.htmlbottom()
        return self.response

# ======================================================================

class ShowRatedObjs(HandlerBase):
    def do_the_things( self ):
        web.header('Content-Type', 'text/html; charset="UTF-8"')
        self.htmltop()
        self.set_state()

        cursor = self.db.cursor( cursor_factory = psycopg2.extras.DictCursor )

        # Get a count

        query = "SELECT COUNT(id) FROM ( SELECT object_id AS id FROM scanscore GROUP BY object_id ) AS x";
        cursor.execute(query)
        numobj = cursor.fetchone()[0]
        
        # Get the ranked things
        
        query = ( "SELECT oid,users,goodbads,exposure_id,cid,rb,ra,dec,ccdnum,filename,scijpg,refjpg,diffjpg FROM "
                  "  ( SELECT ss.object_id AS oid,subs.exposure_id,o.candidate_id AS cid,o.rb,o.ra,o.dec,"
                  "           subs.ccdnum,e.filename,"
                  "           array_agg(ss.username) as users,"
                  "           array_agg(ss.goodbad) as goodbads,"
                  "           ENCODE(cu.sci_jpeg, 'base64') AS scijpg, "
                  "           ENCODE(cu.ref_jpeg, 'base64') AS refjpg, "
                  "           ENCODE(cu.diff_jpeg, 'base64') AS diffjpg "
                  "    FROM scanscore ss "
                  "    INNER JOIN objects o ON ss.object_id=o.id "
                  "    INNER JOIN subtractions subs ON o.subtraction_id=subs.id "
                  "    INNER JOIN exposures e ON subs.exposure_id=e.id "
                  "    LEFT JOIN cutouts cu ON cu.object_id=o.id "
                  "    GROUP BY ss.object_id,e.id,e.filename,o.id,o.candidate_id,o.rb,o.ra,o.dec,"
                  "             subs.exposure_id,subs.ccdnum,"
                  "             cu.sci_jpeg,cu.ref_jpeg,cu.diff_jpeg "
                  "    ORDER BY e.mjd,subs.ccdnum,o.id ) x "
                  "LIMIT %s OFFSET %s" )
        # sys.stderr.write( "Query: {}\n".format( cursor.mogrify( query, ( self.state["numperpage"],
        #                                                                  self.state["offset"] ) ) ) )
        cursor.execute(query, ( self.state["numperpage"], self.state["offset"] ) )
        rows = cursor.fetchall()
        rows = [dict(row) for row in rows ]
        
        # Wrangle the vetting info into what HandlerBase.objecttable expects

        for row in rows:
            row["vetting"] = {}
            for username, score in zip( row["users"], row["goodbads"] ):
                row["vetting"][username] = score

        # Show

        self.prevnext( self.state, numobj, "showrated" )
        self.objecttable( rows, showvetting=True )
        self.prevnext( self.state, numobj, "showrated" )
                
        self.htmlbottom
        return self.response

# ======================================================================

class SetGoodBad(HandlerBase):
    def do_the_things( self ):
        web.header('Content-Type', 'application/json')

        data = json.loads( web.data().decode(encoding='utf-8') )
        rval = self.check_scan_user( data )
        if rval is not None:
            return rval

        query = ( "SELECT user,password FROM scanusers WHERE username=%s" )
        cursor = self.db.cursor( cursor_factory = psycopg2.extras.DictCursor )
        cursor.execute( query, ( data["user"], ) )
        rows = cursor.fetchall()
        if len(rows) == 0:
            rval = { "error": "No such user \"{}\"".format( data["user"] ) }
            return json.dumps(rval)
        if len(rows) > 1:
            rval =  { "error": "User \"{}\" multiply defined!".format( user ) }
        if rows[0]["password"] != data["password"]:
            rval = { "error": "Incorrect password for {}".format(user) }
            
        objid = int(data["obj"])
        if data["status"] == "good": goodbad = True
        elif data["status"] == "bad": goodbad = False
        else:
            rval = { "error": "{} is neither good nor bad".format( data["status"] ) }
            return json.dumps(rval)

        pkey = "{}_{}".format( objid, data["user"] )
        query = ( "INSERT INTO scanscore(id,object_id,username,goodbad) VALUES(%s,%s,%s,%s) "
                  "ON CONFLICT ON CONSTRAINT scanscore_pkey DO UPDATE SET goodbad=%s" )
        cursor = self.db.cursor()
        cursor.execute( query, ( pkey, objid, data["user"], data["status"], data["status"] ) )
        self.db.commit()
        cursor.close()

        rval = { "objid": objid, "status": "good" if goodbad else "bad" }
        return json.dumps(rval)
        

# ======================================================================
    
class DumpData(HandlerBase):
    def do_the_things( self ):
        web.header('Content-Type', 'text/html; charset="UTF-8"')
        self.htmltop()

        data = web.input()
        self.response += "<ul>\n"
        for i in data:
            self.response += "<li>{} = \"{}\"</li>\n".format( i, data[i] )
        self.response += "</ul>\n"
        self.htmlbottom()
        return self.response

# ======================================================================

urls = (
    '/', "FrontPage",
    "/findcands", "FindCandidates",
    "/listexp", "ListExposures",
    "/showexp", "ShowExposure" ,
    "/showcand", "ShowCandidate" ,
    "/ratecands", "RateCands",
    "/setgoodbad", "SetGoodBad" ,
    "/showrated", "ShowRatedObjs",
    "/dumpdata", "DumpData" ,
    )

web.config.session_parameters["samesite"] = "lax"
app = web.application(urls, globals())
application = app.wsgifunc()

if __name__ == "__main__":
    app.run()
