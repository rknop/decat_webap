// DON'T EDIT decatview.js, INSTEAD EDIT decatview.js.in

var webap = "@webap@";

// Namespace

var decatview = {}

// **********************************************************************
// http communication utility functions

var waitforresponse = function( request )
{
    var type;
    
    if (request.readyState === 4 && request.status === 200) {
        type = request.getResponseHeader("Content-Type");
        if (type === "application/json")
        {
            return true;
        }
        else
        {
            window.alert("Request didn't return JSON.  Everything is broken.  Panic.");
            return null;
        }
    }
    else if (request.readyState == 4) {
        window.alert("Woah, got back status " + request.status + ".  Everything is broken.  Panic.");
        return null;
    }
    else {
        return false;
    }
}


var catchHttpResponse = function( req, handler, errorhandler )
{
    if ( ! waitforresponse( req ) ) return;
    let statedata = JSON.parse( req.responseText );
    if ( statedata.hasOwnProperty( "error" ) ) {
        window.alert( statedata.error );
        if ( errorhandler != null ) {
            errorhandler( statedata );
        }
        return;
    }
    handler( statedata );
}

// **********************************************************************
// Initialization, run when the page is fully loaded by
// decatview.init_interval below.  Hook up all the UI.

decatview.init = function()
{
    // I HATE Javscript scoping.  I wanted to just reuse the variable
    // elem for all the results of getElementById like, you know, you
    // could in python, or C, or any number of other programming
    // languages that aren't the unintuitive mess that is Javascript..
    // But, that totally screws up the callbacks.  So, I have to add a
    // bunch of blocks and extra "let" statements to make Javascript
    // behave like a sane programming language.
    
    let allpropornot = document.getElementById( "allpropornot" );
    if ( allpropornot != null ) {
        decatview.toggleWhichProps( allpropornot );
        allpropornot.addEventListener( "change", function() { decatview.toggleWhichProps( allpropornot ) } );
    }
    let showobjects = document.getElementsByName( "showobjects" );
    for ( let elem of showobjects ) {
        elem.addEventListener( "click", function() { decatview.showObjects( elem.dataset.exposure ) } );
    }
    let showlog = document.getElementsByName( "showlog" );
    for ( let elem of showlog ) {
        elem.addEventListener( "click", function() { decatview.showLog( elem.dataset.exposure ) } );
    }
    let makethingsbad = document.getElementsByName( "makethingsbad" );
    for ( let elem of makethingsbad ) {
        elem.addEventListener( "click", function() { decatview.setAllBad( elem.dataset.user,
                                                                          elem.dataset.password ) } );
    }    
    let allinputs = document.getElementsByTagName( "input" );
    for ( let elem of allinputs ) {
        if ( ( elem.type == "radio" ) && ( elem.name.substring(elem.name.length-9) == "statusset" ) ) {
            elem.addEventListener( "change",
                                   function() { decatview.sendOneGoodBad( elem.dataset.user,
                                                                          elem.dataset.password,
                                                                          elem.dataset.objid,
                                                                          elem.dataset.goodbad ) } );
        }
    }
    let addvetcondition = document.getElementById( "Add Vet Condition" );
    addvetcondition.addEventListener( "click", function() { decatview.addVetCondition(); } );
}

// **********************************************************************
// Enable/disable the list of proposals based on the value of the
// dropdown that says if you want to include all proposals or not

decatview.toggleWhichProps = function( dropdown )
{
    let props = document.getElementsByName( "whichprops" );
    let div = document.getElementById( "whichprops_div" );
    if ( dropdown.value == "some" ) {
        for ( let prop of props ) prop.disabled = false;
        div.style.display = "block";
    }
    else {
        for ( let prop of props ) prop.disabled = true;
        div.style.display = "none";
    }
}

// **********************************************************************
// Small functions used with clicks, changes, etc. of UI elements

decatview.get_show_exp_data = function( exposure )
{
    let data = {};
    data.ccds = document.getElementById("ccds").value;
    data.showvetting = document.getElementById("showvetting").value;
    data.showrb = document.getElementById("showrb0").value; // Extra 0 from how I do ids with web.form.Input
    data.offset = document.getElementById("offset0").value; //  "    "  "    "  " "   "   "    "   
    data.date0 = document.getElementById("date00").value;   //  "    "  "    "  " "   "   "    "   
    data.date1 = document.getElementById("date10").value;   //  "    "  "    "  " "   "   "    "   
    let orderbys = document.getElementsByName("orderby");
    for ( let elem in orderbys )
        if ( ( elem.type == "radio" ) && ( elem.checked ) )
             data.orderby = elem.value;
    data.exposure = exposure;
    return data;
}

decatview.send_show_exp_request = function( reqdata )
{
    let form = document.createElement( "form" );
    form.setAttribute( "method", "post" );
    form.setAttribute( "action", webap + "showexp" );
    for ( let i in reqdata ) {
        let input = document.createElement( "input" );
        input.setAttribute( "name", i );
        input.setAttribute( "type", "hidden" );
        input.setAttribute( "value", reqdata[i] );
        form.appendChild( input );
    }
    // console.log( "Submitting form to " + form.getAttribute("action") );
    document.body.appendChild( form );
    form.submit()
}

decatview.showObjects = function( exposure )
{
    let reqdata = decatview.get_show_exp_data( exposure )
    reqdata.whattodo = "Show Objects";
    decatview.send_show_exp_request( reqdata );
}

decatview.showLog = function( exposure )
{
    let reqdata = decatview.get_show_exp_data( exposure )
    reqdata.whattodo = "Show Log";
    decatview.send_show_exp_request( reqdata );
}


decatview.setAllBad = function( user, password )
{
    if ( ! confirm( "Really set all unset objects to bad?  Be careful!" ) )
        return;
    let re = new RegExp( '^(.*)status(good|bad)$' );
    let allobjs = new Set();
    let setobjs = new Set();
    let elems = document.getElementsByTagName( "input" );
    for ( let elem of elems ) {
        let match = re.exec(elem.id);
        if ( match != null ) {
            allobjs.add( match[1] );
            if ( elem.checked ) setobjs.add( match[1] );
        }
    }
    let unsetobjs = [];
    let bads = [];
    for ( let obj of allobjs ) {
        if ( ! setobjs.has(obj) ) {
            unsetobjs.push( obj );
            bads.push( "bad" );
        }
    }
    // console.log( "Sending " + unsetobjs.length + " objects to be made bad." )
    decatview.sendManyGoodBad( user, password, unsetobjs, bads );
}

decatview.sendOneGoodBad = function( user, password, obj, goodbad )
{
    decatview.sendManyGoodBad( user, password, [obj], [goodbad] );
}

decatview.sendManyGoodBad = function( user, password, objs, goodbads )
{
    for ( let obj of objs ) {
        let id = obj + "status";
        let elem = document.getElementById(id);
        elem.innerHTML = "...sending...";
    }
    let req = new XMLHttpRequest();
    req.open( "POST", webap + "setgoodbad");
    req.onreadystatechange = function() {
        catchHttpResponse( req, function( statedata ) {
            decatview.echoGoodBad( statedata );
        }, null )
    };
    req.setRequestHeader( "Content-Type", "application/json" );
    req.send( JSON.stringify( { "obj": objs, "password": password, "user": user, "status": goodbads } ) );
}

decatview.echoGoodBad = function( statedata )
{
    for ( let i in statedata['objid'] ) {
        let id = statedata['objid'][i] + "status";
        let status = statedata['status'][i];
        // console.log( "Looking for element " + id );
        let elem = document.getElementById(id);
        elem.innerHTML = status;
        elem.setAttribute("class", status);
        if ( status == "good" ) {
            elem = document.getElementById( id + "good" );
            elem.checked = true;
            elem = document.getElementById( id + "bad" );
            elem.checked = false;
        }
        else {
            elem = document.getElementById( id + "good" );
            elem.checked = false;
            elem = document.getElementById( id + "bad" );
            elem.checked = true;
        }
    }
}

decatview.addVetCondition = function()
{
    let vetconds = document.getElementById( "vetconditions" );
    let maxcond = 0;
    for ( let kid of vetconds.children ) {
        if ( kid.id.substring(0,7) != "vetcond" ) {
            console.log( "Unrecognized div inside vetconditions: " + kd.id );
        }
        else {
            let i = parseInt( kid.id.substring(7) );
            if ( i >= maxcond ) {
                maxcond = i+1;
            }
        }
    }
    let div = document.createElement( "div" );
    div.id = "vetcond " + maxcond;
    div.classList.add( "emmarginabove" )
    vetconds.appendChild( div );

    let condtype = document.createElement( "select" );
    condtype.id = "vetcond " + maxcond + " type";
    condtype.setAttribute( "name", condtype.id );
    for ( let val of [ 'user', 'unanimous', 'majority' ] ) {
        let opt = document.createElement( "option" );
        opt.value = val;
        opt.text = val;
        condtype.add( opt );
    }
    div.appendChild( condtype );

    let conduser = document.createElement( "input" );
    conduser.id = "vetcond " + maxcond + " user";
    conduser.setAttribute( "name", conduser.id );
    conduser.setAttribute( "size", 10 );
    div.appendChild( conduser );

    let condgb = document.createElement( "select" );
    condgb.id = "vetcond " + maxcond + " gb";
    condgb.setAttribute( "name", condgb.id );
    for ( let val of [ "good", "bad" ] ) {
        let opt = document.createElement( "option" );
        opt.value = val;
        opt.text = val;
        condgb.add( opt );
    }
    div.appendChild( condgb );

    let condnumvetspan = document.createElement( "span" );
    condnumvetspan.style.display = "none";
    div.appendChild( condnumvetspan );
    condnumvetspan.appendChild( document.createTextNode( " ≥" ) );
    let condnumvets = document.createElement( "input" );
    condnumvets.setAttribute( "type", "number" );
    condnumvets.id = "vetcond " + maxcond + " numvets";
    condnumvets.setAttribute( "name", condnumvets.id );
    condnumvets.setAttribute( "min", 0 );
    condnumvets.setAttribute( "size", 3 );
    condnumvets.setAttribute( "value", 3 );
    condnumvetspan.appendChild( condnumvets );
    condnumvetspan.appendChild( document.createTextNode( " ratings" ) );

    let condmindiffspan = document.createElement( "span" );
    condmindiffspan.style.display = "none";
    div.appendChild( condmindiffspan );
    condmindiffspan.appendChild( document.createTextNode( "; min difference:" ) );
    let condmindiff = document.createElement( "input" );
    condmindiff.setAttribute( "type", "number" );
    condmindiff.id = "vetcond " + maxcond + " mindiff";
    condmindiff.setAttribute( "name", condmindiff.id );
    condmindiff.setAttribute( "min", 1 );
    condmindiff.setAttribute( "size", 3 );
    condmindiff.setAttribute( "value", 2 );
    condmindiffspan.appendChild( condmindiff );

    let condrem = document.createElement( "button" );
    condrem.id = "vetcond " + maxcond + " remove";
    condrem.setAttribute( "name", condrem.id );
    condrem.appendChild( document.createTextNode( "Remove Condition" ) );
    div.appendChild( condrem );

    condtype.addEventListener( 'change', function() {
        if ( condtype.value == "user" ) {
            conduser.style.display = "inline";
            condnumvetspan.style.display = "none";
            condmindiffspan.style.display = "none";
        }
        else if ( condtype.value == "unanimous" ) {
            conduser.style.display = "none";
            condnumvetspan.style.display = "inline";
            condmindiffspan.style.display = "none";
        }
        else if ( condtype.value == "majority" ) {
            conduser.style.display = "none";
            condnumvetspan.style.display = "inline";
            condmindiffspan.style.display = "inline";
        }
        else {
            window.alert( "Unknown condition type " + condtype.value + "; you should never see this error." )
        }
    } )

    condrem.addEventListener( 'click', function() { div.remove(); } );
}


// **********************************************************************
// Startup code to hook up things

decatview.started = false

// console.log("About to window.setInterval...");
decatview.init_interval = window.setInterval(
    function()
    {
        let requestdata, renderer;

        if (document.readyState == "complete")
        {
            // console.log( "document.readyState is complete" );
            if ( !decatview.started )
            {
                decatview.started = true;
                window.clearInterval( decatview.init_interval );
                decatview.init();
            }
        }
    },
    100);

// **********************************************************************
// Make it a module!

export { decatview }
